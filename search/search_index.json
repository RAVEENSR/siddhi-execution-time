{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi Execution Time\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nThe \nsiddhi-execution-time extension\n is a \nSiddhi\n extension that provides time related functionality such as getting current time, current date, manipulating/formatting dates, etc.\n\n\nFor information on \nSiddhi\n and it's features refer \nSiddhi Documentation\n. \n\n\nDownload\n\n\n\n\nVersions 5.x and above with group id \nio.siddhi.extension.*\n from \nhere\n.\n\n\nVersions 4.x and lower with group id \norg.wso2.extension.siddhi.*\n from \nhere\n.\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n5.0.3\n.\n\n\nFeatures\n\n\n\n\ncurrentDate\n \n(\nFunction\n)\n \nFunction returns the system time in \nyyyy-MM-dd\n format.\n\n\ncurrentTime\n \n(\nFunction\n)\n \nFunction returns system time in the \nHH:mm:ss\n format.\n\n\ncurrentTimestamp\n \n(\nFunction\n)\n \nWhen no argument is provided, function returns the system current timestamp in \nyyyy-MM-dd HH:mm:ss\n format, and when a timezone is provided as an argument, it converts and return the current system time to the given timezone format.\n\n\ndate\n \n(\nFunction\n)\n \nExtracts the date part of a date or date-time and return it in \nyyyy-MM-dd\n format.\n\n\ndateAdd\n \n(\nFunction\n)\n \nAdds the specified time interval to a date.\n\n\ndateDiff\n \n(\nFunction\n)\n \nReturns difference between two dates in days.\n\n\ndateFormat\n \n(\nFunction\n)\n \nFormats the data in string or milliseconds format to the given date format.\n\n\ndateSub\n \n(\nFunction\n)\n \nSubtracts the specified time interval from the given date.\n\n\ndayOfWeek\n \n(\nFunction\n)\n \nExtracts the day on which a given date falls.\n\n\nextract\n \n(\nFunction\n)\n \nFunction extracts a date unit from the date.\n\n\ntimestampInMilliseconds\n \n(\nFunction\n)\n \nReturns the system time or the given time in milliseconds.\n\n\nutcTimestamp\n \n(\nFunction\n)\n \nFunction returns the system current time in UTC timezone with \nyyyy-MM-dd HH:mm:ss\n format.\n\n\n\n\nDependencies\n\n\nThere are no other dependencies needed for this extension. \n\n\nInstallation\n\n\nFor installing this extension on various siddhi execution environments refer Siddhi documentation section on \nadding extensions\n.\n\n\nSupport and Contribution\n\n\n\n\n\n\nWe encourage users to ask questions and get support via \nStackOverflow\n, make sure to add the \nsiddhi\n tag to the issue for better response.\n\n\n\n\n\n\nIf you find any issues related to the extension please report them on \nthe issue tracker\n.\n\n\n\n\n\n\nFor production support and other contribution related information refer \nSiddhi Community\n documentation.", 
            "title": "Information"
        }, 
        {
            "location": "/#siddhi-execution-time", 
            "text": "The  siddhi-execution-time extension  is a  Siddhi  extension that provides time related functionality such as getting current time, current date, manipulating/formatting dates, etc.  For information on  Siddhi  and it's features refer  Siddhi Documentation .", 
            "title": "Siddhi Execution Time"
        }, 
        {
            "location": "/#download", 
            "text": "Versions 5.x and above with group id  io.siddhi.extension.*  from  here .  Versions 4.x and lower with group id  org.wso2.extension.siddhi.*  from  here .", 
            "title": "Download"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  5.0.3 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#features", 
            "text": "currentDate   ( Function )   Function returns the system time in  yyyy-MM-dd  format.  currentTime   ( Function )   Function returns system time in the  HH:mm:ss  format.  currentTimestamp   ( Function )   When no argument is provided, function returns the system current timestamp in  yyyy-MM-dd HH:mm:ss  format, and when a timezone is provided as an argument, it converts and return the current system time to the given timezone format.  date   ( Function )   Extracts the date part of a date or date-time and return it in  yyyy-MM-dd  format.  dateAdd   ( Function )   Adds the specified time interval to a date.  dateDiff   ( Function )   Returns difference between two dates in days.  dateFormat   ( Function )   Formats the data in string or milliseconds format to the given date format.  dateSub   ( Function )   Subtracts the specified time interval from the given date.  dayOfWeek   ( Function )   Extracts the day on which a given date falls.  extract   ( Function )   Function extracts a date unit from the date.  timestampInMilliseconds   ( Function )   Returns the system time or the given time in milliseconds.  utcTimestamp   ( Function )   Function returns the system current time in UTC timezone with  yyyy-MM-dd HH:mm:ss  format.", 
            "title": "Features"
        }, 
        {
            "location": "/#dependencies", 
            "text": "There are no other dependencies needed for this extension.", 
            "title": "Dependencies"
        }, 
        {
            "location": "/#installation", 
            "text": "For installing this extension on various siddhi execution environments refer Siddhi documentation section on  adding extensions .", 
            "title": "Installation"
        }, 
        {
            "location": "/#support-and-contribution", 
            "text": "We encourage users to ask questions and get support via  StackOverflow , make sure to add the  siddhi  tag to the issue for better response.    If you find any issues related to the extension please report them on  the issue tracker .    For production support and other contribution related information refer  Siddhi Community  documentation.", 
            "title": "Support and Contribution"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v5.0.3\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nFunction returns the system time in \nyyyy-MM-dd\n format.\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentDate()\n\n\n\n\nReturns the current date in the \nyyyy-MM-dd\n format, such as \n2019-06-21\n.\n\n\n\ncurrentTime \n(Function)\n\n\nFunction returns system time in the \nHH:mm:ss\n format.\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentTime()\n\n\n\n\nReturns the current date in the \nHH:mm:ss\n format, such as \n15:23:24\n.\n\n\n\ncurrentTimestamp \n(Function)\n\n\nWhen no argument is provided, function returns the system current timestamp in \nyyyy-MM-dd HH:mm:ss\n format, and when a timezone is provided as an argument, it converts and return the current system time to the given timezone format.\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\nSTRING\n time:currentTimestamp(\nSTRING\n timezone)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimezone\n\n        \nThe timezone to which the current time need to be converted. For example, \nAsia/Kolkata\n, \nPST\n. Get the supported timezone IDs from \nhere\n\n        \nSystem timezone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentTimestamp()\n\n\n\n\nReturns current system time in \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 14:07:00\n.\n\n\n\nEXAMPLE 2\n\n\ntime:currentTimestamp('Asia/Kolkata')\n\n\n\n\nReturns current system time converted to 'Asia/Kolkata' timezone \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 19:07:00\n. Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)\n\n\n\nEXAMPLE 3\n\n\ntime:currentTimestamp('CST')\n\n\n\n\nReturns current system time converted to 'CST' timezone \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 02:07:00\n. Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)\n\n\n\ndate \n(Function)\n\n\nExtracts the date part of a date or date-time and return it in \nyyyy-MM-dd\n format.\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\nSTRING\n time:date(\nSTRING\n date.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:date('2014/11/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')\n\n\n\n\nExtracts the date and returns \n2014-11-11\n.\n\n\n\nEXAMPLE 2\n\n\ntime:date('2014-11-23 13:23:44.345')\n\n\n\n\nExtracts the date and returns \n2014-11-13\n.\n\n\n\nEXAMPLE 3\n\n\ntime:date('13:23:44', 'HH:mm:ss')\n\n\n\n\nExtracts the date and returns \n1970-01-01\n.\n\n\n\ndateAdd \n(Function)\n\n\nAdds the specified time interval to a date.\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit)\n\nSTRING\n time:dateAdd(\nLONG\n timestamp.in.milliseconds, \nINT\n expr, \nSTRING\n unit)\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be incremented. For example \n2\n ,\n5 \n,\n10\n, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')\n\n\n\n\nAdds five years to the given date value and returns \n2019-11-11 13:23:44.657\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR')\n\n\n\n\nAdds five years to the given date value and returns \n2019-11-11 13:23:44.657\n using the default date.format \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateAdd( 1415712224000L, 1, 'HOUR')\n\n\n\n\nAdds one hour and \n1415715824000\n as a \nstring\n.\n\n\n\ndateDiff \n(Function)\n\n\nReturns difference between two dates in days.\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.format1, \nSTRING\n date.value2, \nSTRING\n date.format2)\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2)\n\nINT\n time:dateDiff(\nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nThe value of the first date parameter. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.value2\n\n        \nThe value of the second date parameter. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n , \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format1\n\n        \nThe format of the first date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format2\n\n        \nThe format of the second date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \nThe first date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \nThe second date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateDiff('2014-11-11 13:23:44', 'yyyy-MM-dd HH:mm:ss', '2014-11-9 13:23:44', 'yyyy-MM-dd HH:mm:ss')\n\n\n\n\nReturns the date difference between the two given dates as \n2\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateDiff('2014-11-13 13:23:44', '2014-11-9 13:23:44')\n\n\n\n\nReturns the date difference between the two given dates as \n4\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateDiff(1415692424000L, 1412841224000L)\n\n\n\n\nReturns the date difference between the two given dates as \n33\n.\n\n\n\ndateFormat \n(Function)\n\n\nFormats the data in string or milliseconds format to the given date format.\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format)\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format)\n\nSTRING\n time:dateFormat(\nLONG\n timestamp.in.milliseconds, \nSTRING\n date.target.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nThe format of the date into which the date value needs to be converted. For example, \nyyyy/MM/dd HH:mm:ss\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nThe format input date.value.For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateFormat('2014/11/11 13:23:44', 'mm:ss', 'yyyy/MM/dd HH:mm:ss') \n\n\n\n\nConverts date based on the target date format \nmm:ss\n and returns \n23:44\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateFormat('2014-11-11 13:23:44', 'HH:mm:ss') \n\n\n\n\nConverts date based on the target date format \nHH:mm:ss\n and returns \n13:23:44\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateFormat(1415692424000L, 'yyyy-MM-dd') \n\n\n\n\nConverts date in millisecond based on the target date format \nyyyy-MM-dd\n and returns \n2014-11-11\n.\n\n\n\ndateSub \n(Function)\n\n\nSubtracts the specified time interval from the given date.\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit)\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format)\n\nSTRING\n time:dateSub(\nLONG\n timestamp.in.milliseconds, \nINT\n expr, \nSTRING\n unit)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be decremented. For example \n2\n ,\n5 \n,\n10\n, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')\n\n\n\n\nSubtracts five years to the given date value and returns \n2014-11-11 13:23:44.657\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR')\n\n\n\n\nSubtracts five years to the given date value and returns \n2014-11-11 13:23:44.657\n using the default date.format \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateSub( 1415715824000L, 1, 'HOUR')\n\n\n\n\nSubtracts one hour and \n1415712224000\n as a \nstring\n.\n\n\n\ndayOfWeek \n(Function)\n\n\nExtracts the day on which a given date falls.\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:date('2014/12/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')\n\n\n\n\nExtracts the date and returns \nThursday\n.\n\n\n\nEXAMPLE 2\n\n\ntime:date('2014-11-11 13:23:44.345')\n\n\n\n\nExtracts the date and returns \nTuesday\n.\n\n\n\nextract \n(Function)\n\n\nFunction extracts a date unit from the date.\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format)\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value)\n\nINT\n time:extract(\nLONG\n timestamp.in.milliseconds, \nSTRING\n unit)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:extract('YEAR', '2019/11/11 13:23:44.657', 'yyyy/MM/dd HH:mm:ss.SSS')\n\n\n\n\nExtracts the year amount and returns \n2019\n.\n\n\n\nEXAMPLE 2\n\n\ntime:extract('DAY', '2019-11-12 13:23:44.657')\n\n\n\n\nExtracts the day amount and returns \n12\n.\n\n\n\nEXAMPLE 3\n\n\ntime:extract(1394556804000L, 'HOUR')\n\n\n\n\nExtracts the hour amount and returns \n22\n.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nReturns the system time or the given time in milliseconds.\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds()\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \nCurrent system time\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:timestampInMilliseconds()\n\n\n\n\nReturns the system current time in milliseconds.\n\n\n\nEXAMPLE 2\n\n\ntime:timestampInMilliseconds('2007-11-30 10:30:19', 'yyyy-MM-DD HH:MM:SS')\n\n\n\n\nConverts \n2007-11-30 10:30:19\n in \nyyyy-MM-DD HH:MM:SS\n format to  milliseconds as \n1170131400019\n.\n\n\n\nEXAMPLE 3\n\n\ntime:timestampInMilliseconds('2007-11-30 10:30:19.000')\n\n\n\n\nConverts \n2007-11-30 10:30:19\n in \nyyyy-MM-DD HH:MM:ss.SSS\n format to  milliseconds as \n1196398819000\n.\n\n\n\nutcTimestamp \n(Function)\n\n\nFunction returns the system current time in UTC timezone with \nyyyy-MM-dd HH:mm:ss\n format.\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:utcTimestamp()\n\n\n\n\nReturns the system current time in UTC timezone with \nyyyy-MM-dd HH:mm:ss\n format, and a sample output will be like \n2019-07-03 09:58:34\n.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v503", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v5.0.3"
        }, 
        {
            "location": "/api/latest/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/latest/#currentdate-function", 
            "text": "Function returns the system time in  yyyy-MM-dd  format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  time:currentDate()  Returns the current date in the  yyyy-MM-dd  format, such as  2019-06-21 .", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/latest/#currenttime-function", 
            "text": "Function returns system time in the  HH:mm:ss  format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  time:currentTime()  Returns the current date in the  HH:mm:ss  format, such as  15:23:24 .", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/latest/#currenttimestamp-function", 
            "text": "When no argument is provided, function returns the system current timestamp in  yyyy-MM-dd HH:mm:ss  format, and when a timezone is provided as an argument, it converts and return the current system time to the given timezone format.  Syntax  STRING  time:currentTimestamp() STRING  time:currentTimestamp( STRING  timezone)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timezone \n         The timezone to which the current time need to be converted. For example,  Asia/Kolkata ,  PST . Get the supported timezone IDs from  here \n         System timezone \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  time:currentTimestamp()  Returns current system time in  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 14:07:00 .  EXAMPLE 2  time:currentTimestamp('Asia/Kolkata')  Returns current system time converted to 'Asia/Kolkata' timezone  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 19:07:00 . Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)  EXAMPLE 3  time:currentTimestamp('CST')  Returns current system time converted to 'CST' timezone  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 02:07:00 . Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/latest/#date-function", 
            "text": "Extracts the date part of a date or date-time and return it in  yyyy-MM-dd  format.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format) STRING  time:date( STRING  date.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         \n         STRING \n         No \n         Yes \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:date('2014/11/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')  Extracts the date and returns  2014-11-11 .  EXAMPLE 2  time:date('2014-11-23 13:23:44.345')  Extracts the date and returns  2014-11-13 .  EXAMPLE 3  time:date('13:23:44', 'HH:mm:ss')  Extracts the date and returns  1970-01-01 .", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/latest/#dateadd-function", 
            "text": "Adds the specified time interval to a date.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit) STRING  time:dateAdd( LONG  timestamp.in.milliseconds,  INT  expr,  STRING  unit) STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         expr \n         The amount by which the selected part of the date should be incremented. For example  2  , 5  , 10 , etc. \n         \n         INT \n         No \n         Yes \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')  Adds five years to the given date value and returns  2019-11-11 13:23:44.657 .  EXAMPLE 2  time:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR')  Adds five years to the given date value and returns  2019-11-11 13:23:44.657  using the default date.format  yyyy-MM-dd HH:mm:ss.SSS .  EXAMPLE 3  time:dateAdd( 1415712224000L, 1, 'HOUR')  Adds one hour and  1415715824000  as a  string .", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/latest/#datediff-function", 
            "text": "Returns difference between two dates in days.  Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.format1,  STRING  date.value2,  STRING  date.format2) INT  time:dateDiff( STRING  date.value1,  STRING  date.value2) INT  time:dateDiff( LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         The value of the first date parameter. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         date.value2 \n         The value of the second date parameter. For example,  2014-11-11 13:23:44.657 ,  2014-11-11  ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         date.format1 \n         The format of the first date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         date.format2 \n         The format of the second date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds1 \n         The first date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds2 \n         The second date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:dateDiff('2014-11-11 13:23:44', 'yyyy-MM-dd HH:mm:ss', '2014-11-9 13:23:44', 'yyyy-MM-dd HH:mm:ss')  Returns the date difference between the two given dates as  2 .  EXAMPLE 2  time:dateDiff('2014-11-13 13:23:44', '2014-11-9 13:23:44')  Returns the date difference between the two given dates as  4 .  EXAMPLE 3  time:dateDiff(1415692424000L, 1412841224000L)  Returns the date difference between the two given dates as  33 .", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/latest/#dateformat-function", 
            "text": "Formats the data in string or milliseconds format to the given date format.  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format) STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format) STRING  time:dateFormat( LONG  timestamp.in.milliseconds,  STRING  date.target.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         date.target.format \n         The format of the date into which the date value needs to be converted. For example,  yyyy/MM/dd HH:mm:ss . \n         \n         STRING \n         No \n         Yes \n     \n     \n         date.source.format \n         The format input date.value.For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:dateFormat('2014/11/11 13:23:44', 'mm:ss', 'yyyy/MM/dd HH:mm:ss')   Converts date based on the target date format  mm:ss  and returns  23:44 .  EXAMPLE 2  time:dateFormat('2014-11-11 13:23:44', 'HH:mm:ss')   Converts date based on the target date format  HH:mm:ss  and returns  13:23:44 .  EXAMPLE 3  time:dateFormat(1415692424000L, 'yyyy-MM-dd')   Converts date in millisecond based on the target date format  yyyy-MM-dd  and returns  2014-11-11 .", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/latest/#datesub-function", 
            "text": "Subtracts the specified time interval from the given date.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit) STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format) STRING  time:dateSub( LONG  timestamp.in.milliseconds,  INT  expr,  STRING  unit)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         expr \n         The amount by which the selected part of the date should be decremented. For example  2  , 5  , 10 , etc. \n         \n         INT \n         No \n         Yes \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')  Subtracts five years to the given date value and returns  2014-11-11 13:23:44.657 .  EXAMPLE 2  time:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR')  Subtracts five years to the given date value and returns  2014-11-11 13:23:44.657  using the default date.format  yyyy-MM-dd HH:mm:ss.SSS .  EXAMPLE 3  time:dateSub( 1415715824000L, 1, 'HOUR')  Subtracts one hour and  1415712224000  as a  string .", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/latest/#dayofweek-function", 
            "text": "Extracts the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format) STRING  time:dayOfWeek( STRING  date.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         \n         STRING \n         No \n         Yes \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:date('2014/12/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')  Extracts the date and returns  Thursday .  EXAMPLE 2  time:date('2014-11-11 13:23:44.345')  Extracts the date and returns  Tuesday .", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/latest/#extract-function", 
            "text": "Function extracts a date unit from the date.  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format) INT  time:extract( STRING  unit,  STRING  date.value) INT  time:extract( LONG  timestamp.in.milliseconds,  STRING  unit)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:extract('YEAR', '2019/11/11 13:23:44.657', 'yyyy/MM/dd HH:mm:ss.SSS')  Extracts the year amount and returns  2019 .  EXAMPLE 2  time:extract('DAY', '2019-11-12 13:23:44.657')  Extracts the day amount and returns  12 .  EXAMPLE 3  time:extract(1394556804000L, 'HOUR')  Extracts the hour amount and returns  22 .", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/latest/#timestampinmilliseconds-function", 
            "text": "Returns the system time or the given time in milliseconds.  Syntax  LONG  time:timestampInMilliseconds() LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format) LONG  time:timestampInMilliseconds( STRING  date.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         Current system time \n         STRING \n         Yes \n         Yes \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:timestampInMilliseconds()  Returns the system current time in milliseconds.  EXAMPLE 2  time:timestampInMilliseconds('2007-11-30 10:30:19', 'yyyy-MM-DD HH:MM:SS')  Converts  2007-11-30 10:30:19  in  yyyy-MM-DD HH:MM:SS  format to  milliseconds as  1170131400019 .  EXAMPLE 3  time:timestampInMilliseconds('2007-11-30 10:30:19.000')  Converts  2007-11-30 10:30:19  in  yyyy-MM-DD HH:MM:ss.SSS  format to  milliseconds as  1196398819000 .", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/latest/#utctimestamp-function", 
            "text": "Function returns the system current time in UTC timezone with  yyyy-MM-dd HH:mm:ss  format.  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  time:utcTimestamp()  Returns the system current time in UTC timezone with  yyyy-MM-dd HH:mm:ss  format, and a sample output will be like  2019-07-03 09:58:34 .", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.3/", 
            "text": "API Docs - v5.0.3\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nFunction returns the system time in \nyyyy-MM-dd\n format.\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentDate()\n\n\n\n\nReturns the current date in the \nyyyy-MM-dd\n format, such as \n2019-06-21\n.\n\n\n\ncurrentTime \n(Function)\n\n\nFunction returns system time in the \nHH:mm:ss\n format.\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentTime()\n\n\n\n\nReturns the current date in the \nHH:mm:ss\n format, such as \n15:23:24\n.\n\n\n\ncurrentTimestamp \n(Function)\n\n\nWhen no argument is provided, function returns the system current timestamp in \nyyyy-MM-dd HH:mm:ss\n format, and when a timezone is provided as an argument, it converts and return the current system time to the given timezone format.\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\nSTRING\n time:currentTimestamp(\nSTRING\n timezone)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimezone\n\n        \nThe timezone to which the current time need to be converted. For example, \nAsia/Kolkata\n, \nPST\n. Get the supported timezone IDs from \nhere\n\n        \nSystem timezone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentTimestamp()\n\n\n\n\nReturns current system time in \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 14:07:00\n.\n\n\n\nEXAMPLE 2\n\n\ntime:currentTimestamp('Asia/Kolkata')\n\n\n\n\nReturns current system time converted to 'Asia/Kolkata' timezone \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 19:07:00\n. Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)\n\n\n\nEXAMPLE 3\n\n\ntime:currentTimestamp('CST')\n\n\n\n\nReturns current system time converted to 'CST' timezone \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 02:07:00\n. Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)\n\n\n\ndate \n(Function)\n\n\nExtracts the date part of a date or date-time and return it in \nyyyy-MM-dd\n format.\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\nSTRING\n time:date(\nSTRING\n date.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:date('2014/11/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')\n\n\n\n\nExtracts the date and returns \n2014-11-11\n.\n\n\n\nEXAMPLE 2\n\n\ntime:date('2014-11-23 13:23:44.345')\n\n\n\n\nExtracts the date and returns \n2014-11-13\n.\n\n\n\nEXAMPLE 3\n\n\ntime:date('13:23:44', 'HH:mm:ss')\n\n\n\n\nExtracts the date and returns \n1970-01-01\n.\n\n\n\ndateAdd \n(Function)\n\n\nAdds the specified time interval to a date.\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit)\n\nSTRING\n time:dateAdd(\nLONG\n timestamp.in.milliseconds, \nINT\n expr, \nSTRING\n unit)\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be incremented. For example \n2\n ,\n5 \n,\n10\n, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')\n\n\n\n\nAdds five years to the given date value and returns \n2019-11-11 13:23:44.657\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR')\n\n\n\n\nAdds five years to the given date value and returns \n2019-11-11 13:23:44.657\n using the default date.format \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateAdd( 1415712224000L, 1, 'HOUR')\n\n\n\n\nAdds one hour and \n1415715824000\n as a \nstring\n.\n\n\n\ndateDiff \n(Function)\n\n\nReturns difference between two dates in days.\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.format1, \nSTRING\n date.value2, \nSTRING\n date.format2)\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2)\n\nINT\n time:dateDiff(\nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nThe value of the first date parameter. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.value2\n\n        \nThe value of the second date parameter. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n , \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format1\n\n        \nThe format of the first date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format2\n\n        \nThe format of the second date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \nThe first date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \nThe second date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateDiff('2014-11-11 13:23:44', 'yyyy-MM-dd HH:mm:ss', '2014-11-9 13:23:44', 'yyyy-MM-dd HH:mm:ss')\n\n\n\n\nReturns the date difference between the two given dates as \n2\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateDiff('2014-11-13 13:23:44', '2014-11-9 13:23:44')\n\n\n\n\nReturns the date difference between the two given dates as \n4\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateDiff(1415692424000L, 1412841224000L)\n\n\n\n\nReturns the date difference between the two given dates as \n33\n.\n\n\n\ndateFormat \n(Function)\n\n\nFormats the data in string or milliseconds format to the given date format.\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format)\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format)\n\nSTRING\n time:dateFormat(\nLONG\n timestamp.in.milliseconds, \nSTRING\n date.target.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nThe format of the date into which the date value needs to be converted. For example, \nyyyy/MM/dd HH:mm:ss\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nThe format input date.value.For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateFormat('2014/11/11 13:23:44', 'mm:ss', 'yyyy/MM/dd HH:mm:ss') \n\n\n\n\nConverts date based on the target date format \nmm:ss\n and returns \n23:44\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateFormat('2014-11-11 13:23:44', 'HH:mm:ss') \n\n\n\n\nConverts date based on the target date format \nHH:mm:ss\n and returns \n13:23:44\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateFormat(1415692424000L, 'yyyy-MM-dd') \n\n\n\n\nConverts date in millisecond based on the target date format \nyyyy-MM-dd\n and returns \n2014-11-11\n.\n\n\n\ndateSub \n(Function)\n\n\nSubtracts the specified time interval from the given date.\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit)\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format)\n\nSTRING\n time:dateSub(\nLONG\n timestamp.in.milliseconds, \nINT\n expr, \nSTRING\n unit)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be decremented. For example \n2\n ,\n5 \n,\n10\n, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')\n\n\n\n\nSubtracts five years to the given date value and returns \n2014-11-11 13:23:44.657\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR')\n\n\n\n\nSubtracts five years to the given date value and returns \n2014-11-11 13:23:44.657\n using the default date.format \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateSub( 1415715824000L, 1, 'HOUR')\n\n\n\n\nSubtracts one hour and \n1415712224000\n as a \nstring\n.\n\n\n\ndayOfWeek \n(Function)\n\n\nExtracts the day on which a given date falls.\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:date('2014/12/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')\n\n\n\n\nExtracts the date and returns \nThursday\n.\n\n\n\nEXAMPLE 2\n\n\ntime:date('2014-11-11 13:23:44.345')\n\n\n\n\nExtracts the date and returns \nTuesday\n.\n\n\n\nextract \n(Function)\n\n\nFunction extracts a date unit from the date.\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format)\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value)\n\nINT\n time:extract(\nLONG\n timestamp.in.milliseconds, \nSTRING\n unit)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:extract('YEAR', '2019/11/11 13:23:44.657', 'yyyy/MM/dd HH:mm:ss.SSS')\n\n\n\n\nExtracts the year amount and returns \n2019\n.\n\n\n\nEXAMPLE 2\n\n\ntime:extract('DAY', '2019-11-12 13:23:44.657')\n\n\n\n\nExtracts the day amount and returns \n12\n.\n\n\n\nEXAMPLE 3\n\n\ntime:extract(1394556804000L, 'HOUR')\n\n\n\n\nExtracts the hour amount and returns \n22\n.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nReturns the system time or the given time in milliseconds.\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds()\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \nCurrent system time\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:timestampInMilliseconds()\n\n\n\n\nReturns the system current time in milliseconds.\n\n\n\nEXAMPLE 2\n\n\ntime:timestampInMilliseconds('2007-11-30 10:30:19', 'yyyy-MM-DD HH:MM:SS')\n\n\n\n\nConverts \n2007-11-30 10:30:19\n in \nyyyy-MM-DD HH:MM:SS\n format to  milliseconds as \n1170131400019\n.\n\n\n\nEXAMPLE 3\n\n\ntime:timestampInMilliseconds('2007-11-30 10:30:19.000')\n\n\n\n\nConverts \n2007-11-30 10:30:19\n in \nyyyy-MM-DD HH:MM:ss.SSS\n format to  milliseconds as \n1196398819000\n.\n\n\n\nutcTimestamp \n(Function)\n\n\nFunction returns the system current time in UTC timezone with \nyyyy-MM-dd HH:mm:ss\n format.\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:utcTimestamp()\n\n\n\n\nReturns the system current time in UTC timezone with \nyyyy-MM-dd HH:mm:ss\n format, and a sample output will be like \n2019-07-03 09:58:34\n.", 
            "title": "5.0.3"
        }, 
        {
            "location": "/api/5.0.3/#api-docs-v503", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v5.0.3"
        }, 
        {
            "location": "/api/5.0.3/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/5.0.3/#currentdate-function", 
            "text": "Function returns the system time in  yyyy-MM-dd  format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  time:currentDate()  Returns the current date in the  yyyy-MM-dd  format, such as  2019-06-21 .", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/5.0.3/#currenttime-function", 
            "text": "Function returns system time in the  HH:mm:ss  format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  time:currentTime()  Returns the current date in the  HH:mm:ss  format, such as  15:23:24 .", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/5.0.3/#currenttimestamp-function", 
            "text": "When no argument is provided, function returns the system current timestamp in  yyyy-MM-dd HH:mm:ss  format, and when a timezone is provided as an argument, it converts and return the current system time to the given timezone format.  Syntax  STRING  time:currentTimestamp() STRING  time:currentTimestamp( STRING  timezone)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timezone \n         The timezone to which the current time need to be converted. For example,  Asia/Kolkata ,  PST . Get the supported timezone IDs from  here \n         System timezone \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  time:currentTimestamp()  Returns current system time in  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 14:07:00 .  EXAMPLE 2  time:currentTimestamp('Asia/Kolkata')  Returns current system time converted to 'Asia/Kolkata' timezone  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 19:07:00 . Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)  EXAMPLE 3  time:currentTimestamp('CST')  Returns current system time converted to 'CST' timezone  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 02:07:00 . Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.3/#date-function", 
            "text": "Extracts the date part of a date or date-time and return it in  yyyy-MM-dd  format.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format) STRING  time:date( STRING  date.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         \n         STRING \n         No \n         Yes \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:date('2014/11/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')  Extracts the date and returns  2014-11-11 .  EXAMPLE 2  time:date('2014-11-23 13:23:44.345')  Extracts the date and returns  2014-11-13 .  EXAMPLE 3  time:date('13:23:44', 'HH:mm:ss')  Extracts the date and returns  1970-01-01 .", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/5.0.3/#dateadd-function", 
            "text": "Adds the specified time interval to a date.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit) STRING  time:dateAdd( LONG  timestamp.in.milliseconds,  INT  expr,  STRING  unit) STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         expr \n         The amount by which the selected part of the date should be incremented. For example  2  , 5  , 10 , etc. \n         \n         INT \n         No \n         Yes \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')  Adds five years to the given date value and returns  2019-11-11 13:23:44.657 .  EXAMPLE 2  time:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR')  Adds five years to the given date value and returns  2019-11-11 13:23:44.657  using the default date.format  yyyy-MM-dd HH:mm:ss.SSS .  EXAMPLE 3  time:dateAdd( 1415712224000L, 1, 'HOUR')  Adds one hour and  1415715824000  as a  string .", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/5.0.3/#datediff-function", 
            "text": "Returns difference between two dates in days.  Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.format1,  STRING  date.value2,  STRING  date.format2) INT  time:dateDiff( STRING  date.value1,  STRING  date.value2) INT  time:dateDiff( LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         The value of the first date parameter. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         date.value2 \n         The value of the second date parameter. For example,  2014-11-11 13:23:44.657 ,  2014-11-11  ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         date.format1 \n         The format of the first date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         date.format2 \n         The format of the second date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds1 \n         The first date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds2 \n         The second date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:dateDiff('2014-11-11 13:23:44', 'yyyy-MM-dd HH:mm:ss', '2014-11-9 13:23:44', 'yyyy-MM-dd HH:mm:ss')  Returns the date difference between the two given dates as  2 .  EXAMPLE 2  time:dateDiff('2014-11-13 13:23:44', '2014-11-9 13:23:44')  Returns the date difference between the two given dates as  4 .  EXAMPLE 3  time:dateDiff(1415692424000L, 1412841224000L)  Returns the date difference between the two given dates as  33 .", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/5.0.3/#dateformat-function", 
            "text": "Formats the data in string or milliseconds format to the given date format.  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format) STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format) STRING  time:dateFormat( LONG  timestamp.in.milliseconds,  STRING  date.target.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         date.target.format \n         The format of the date into which the date value needs to be converted. For example,  yyyy/MM/dd HH:mm:ss . \n         \n         STRING \n         No \n         Yes \n     \n     \n         date.source.format \n         The format input date.value.For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:dateFormat('2014/11/11 13:23:44', 'mm:ss', 'yyyy/MM/dd HH:mm:ss')   Converts date based on the target date format  mm:ss  and returns  23:44 .  EXAMPLE 2  time:dateFormat('2014-11-11 13:23:44', 'HH:mm:ss')   Converts date based on the target date format  HH:mm:ss  and returns  13:23:44 .  EXAMPLE 3  time:dateFormat(1415692424000L, 'yyyy-MM-dd')   Converts date in millisecond based on the target date format  yyyy-MM-dd  and returns  2014-11-11 .", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/5.0.3/#datesub-function", 
            "text": "Subtracts the specified time interval from the given date.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit) STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format) STRING  time:dateSub( LONG  timestamp.in.milliseconds,  INT  expr,  STRING  unit)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         expr \n         The amount by which the selected part of the date should be decremented. For example  2  , 5  , 10 , etc. \n         \n         INT \n         No \n         Yes \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')  Subtracts five years to the given date value and returns  2014-11-11 13:23:44.657 .  EXAMPLE 2  time:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR')  Subtracts five years to the given date value and returns  2014-11-11 13:23:44.657  using the default date.format  yyyy-MM-dd HH:mm:ss.SSS .  EXAMPLE 3  time:dateSub( 1415715824000L, 1, 'HOUR')  Subtracts one hour and  1415712224000  as a  string .", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/5.0.3/#dayofweek-function", 
            "text": "Extracts the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format) STRING  time:dayOfWeek( STRING  date.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         \n         STRING \n         No \n         Yes \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:date('2014/12/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')  Extracts the date and returns  Thursday .  EXAMPLE 2  time:date('2014-11-11 13:23:44.345')  Extracts the date and returns  Tuesday .", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/5.0.3/#extract-function", 
            "text": "Function extracts a date unit from the date.  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format) INT  time:extract( STRING  unit,  STRING  date.value) INT  time:extract( LONG  timestamp.in.milliseconds,  STRING  unit)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:extract('YEAR', '2019/11/11 13:23:44.657', 'yyyy/MM/dd HH:mm:ss.SSS')  Extracts the year amount and returns  2019 .  EXAMPLE 2  time:extract('DAY', '2019-11-12 13:23:44.657')  Extracts the day amount and returns  12 .  EXAMPLE 3  time:extract(1394556804000L, 'HOUR')  Extracts the hour amount and returns  22 .", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/5.0.3/#timestampinmilliseconds-function", 
            "text": "Returns the system time or the given time in milliseconds.  Syntax  LONG  time:timestampInMilliseconds() LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format) LONG  time:timestampInMilliseconds( STRING  date.value)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         Current system time \n         STRING \n         Yes \n         Yes \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  time:timestampInMilliseconds()  Returns the system current time in milliseconds.  EXAMPLE 2  time:timestampInMilliseconds('2007-11-30 10:30:19', 'yyyy-MM-DD HH:MM:SS')  Converts  2007-11-30 10:30:19  in  yyyy-MM-DD HH:MM:SS  format to  milliseconds as  1170131400019 .  EXAMPLE 3  time:timestampInMilliseconds('2007-11-30 10:30:19.000')  Converts  2007-11-30 10:30:19  in  yyyy-MM-DD HH:MM:ss.SSS  format to  milliseconds as  1196398819000 .", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/5.0.3/#utctimestamp-function", 
            "text": "Function returns the system current time in UTC timezone with  yyyy-MM-dd HH:mm:ss  format.  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  time:utcTimestamp()  Returns the system current time in UTC timezone with  yyyy-MM-dd HH:mm:ss  format, and a sample output will be like  2019-07-03 09:58:34 .", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.2/", 
            "text": "API Docs - v5.0.2\n\n\n\n\nTested Siddhi Core version: \n5.0.0\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nFunction returns the system time in \nyyyy-MM-dd\n format.\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentDate()\n\n\n\n\nReturns the current date in the \nyyyy-MM-dd\n format, such as \n2019-06-21\n.\n\n\n\ncurrentTime \n(Function)\n\n\nFunction returns system time in the \nHH:mm:ss\n format.\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentTime()\n\n\n\n\nReturns the current date in the \nHH:mm:ss\n format, such as \n15:23:24\n.\n\n\n\ncurrentTimestamp \n(Function)\n\n\nWhen no argument is provided, function returns the system current timestamp in \nyyyy-MM-dd HH:mm:ss\n format, and when a timezone is provided as an argument, it converts and return the current system time to the given timezone format.\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp(\nSTRING\n timezone)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimezone\n\n        \nThe timezone to which the current time need to be converted. For example, \nAsia/Kolkata\n, \nPST\n. Get the supported timezone IDs from \nhere\n\n        \nSystem timezone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:currentTimestamp()\n\n\n\n\nReturns current system time in \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 14:07:00\n.\n\n\n\nEXAMPLE 2\n\n\ntime:currentTimestamp('Asia/Kolkata')\n\n\n\n\nReturns current system time converted to 'Asia/Kolkata' timezone \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 19:07:00\n. Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)\n\n\n\nEXAMPLE 3\n\n\ntime:currentTimestamp('CST')\n\n\n\n\nReturns current system time converted to 'CST' timezone \nyyyy-MM-dd HH:mm:ss\n format, such as \n2019-03-31 02:07:00\n. Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)\n\n\n\ndate \n(Function)\n\n\nExtracts the date part of a date or date-time and return it in \nyyyy-MM-dd\n format.\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:date('2014/11/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')\n\n\n\n\nExtracts the date and returns \n2014-11-11\n.\n\n\n\nEXAMPLE 2\n\n\ntime:date('2014-11-23 13:23:44.345')\n\n\n\n\nExtracts the date and returns \n2014-11-13\n.\n\n\n\nEXAMPLE 3\n\n\ntime:date('13:23:44', 'HH:mm:ss')\n\n\n\n\nExtracts the date and returns \n1970-01-01\n.\n\n\n\ndateAdd \n(Function)\n\n\nAdds the specified time interval to a date.\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be incremented. For example \n2\n ,\n5 \n,\n10\n, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')\n\n\n\n\nAdds five years to the given date value and returns \n2019-11-11 13:23:44.657\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR')\n\n\n\n\nAdds five years to the given date value and returns \n2019-11-11 13:23:44.657\n using the default date.format \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateAdd( 1415712224000L, 1, 'HOUR')\n\n\n\n\nAdds one hour and \n1415715824000\n as a \nstring\n.\n\n\n\ndateDiff \n(Function)\n\n\nReturns difference between two dates in days.\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nThe value of the first date parameter. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nThe value of the second date parameter. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n , \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nThe format of the first date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nThe format of the second date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \nThe first date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \nThe second date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateDiff('2014-11-11 13:23:44', 'yyyy-MM-dd HH:mm:ss', '2014-11-9 13:23:44', 'yyyy-MM-dd HH:mm:ss')\n\n\n\n\nReturns the date difference between the two given dates as \n2\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateDiff('2014-11-13 13:23:44', '2014-11-9 13:23:44')\n\n\n\n\nReturns the date difference between the two given dates as \n4\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateDiff(1415692424000L, 1412841224000L)\n\n\n\n\nReturns the date difference between the two given dates as \n33\n.\n\n\n\ndateFormat \n(Function)\n\n\nFormats the data in string or milliseconds format to the given date format.\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nThe format of the date into which the date value needs to be converted. For example, \nyyyy/MM/dd HH:mm:ss\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nThe format input date.value.For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateFormat('2014/11/11 13:23:44', 'mm:ss', 'yyyy/MM/dd HH:mm:ss') \n\n\n\n\nConverts date based on the target date format \nmm:ss\n and returns \n23:44\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateFormat('2014-11-11 13:23:44', 'HH:mm:ss') \n\n\n\n\nConverts date based on the target date format \nHH:mm:ss\n and returns \n13:23:44\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateFormat(1415692424000L, 'yyyy-MM-dd') \n\n\n\n\nConverts date in millisecond based on the target date format \nyyyy-MM-dd\n and returns \n2014-11-11\n.\n\n\n\ndateSub \n(Function)\n\n\nSubtracts the specified time interval from the given date.\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be decremented. For example \n2\n ,\n5 \n,\n10\n, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')\n\n\n\n\nSubtracts five years to the given date value and returns \n2014-11-11 13:23:44.657\n.\n\n\n\nEXAMPLE 2\n\n\ntime:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR')\n\n\n\n\nSubtracts five years to the given date value and returns \n2014-11-11 13:23:44.657\n using the default date.format \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n\n\nEXAMPLE 3\n\n\ntime:dateSub( 1415715824000L, 1, 'HOUR')\n\n\n\n\nSubtracts one hour and \n1415712224000\n as a \nstring\n.\n\n\n\ndayOfWeek \n(Function)\n\n\nExtracts the day on which a given date falls.\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:date('2014/12/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')\n\n\n\n\nExtracts the date and returns \nThursday\n.\n\n\n\nEXAMPLE 2\n\n\ntime:date('2014-11-11 13:23:44.345')\n\n\n\n\nExtracts the date and returns \nTuesday\n.\n\n\n\nextract \n(Function)\n\n\nFunction extracts a date unit from the date.\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified. For example, \nMINUTE\n, \nHOUR\n, \nMONTH\n, \nYEAR\n, \nQUARTER\n, \nWEEK\n, \nDAY\n, \nSECOND\n.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy-MM-dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds. For example, \n1415712224000L\n.\n\n        \n-\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:extract('YEAR', '2019/11/11 13:23:44.657', 'yyyy/MM/dd HH:mm:ss.SSS')\n\n\n\n\nExtracts the year amount and returns \n2019\n.\n\n\n\nEXAMPLE 2\n\n\ntime:extract('DAY', '2019-11-12 13:23:44.657')\n\n\n\n\nExtracts the day amount and returns \n12\n.\n\n\n\nEXAMPLE 3\n\n\ntime:extract(1394556804000L, 'HOUR')\n\n\n\n\nExtracts the hour amount and returns \n22\n.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nReturns the system time or the given time in milliseconds.\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \n2014-11-11 13:23:44.657\n, \n2014-11-11\n, \n13:23:44.657\n.\n\n        \nCurrent system time\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, \nyyyy/MM/dd HH:mm:ss.SSS\n.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:timestampInMilliseconds()\n\n\n\n\nReturns the system current time in milliseconds.\n\n\n\nEXAMPLE 2\n\n\ntime:timestampInMilliseconds('2007-11-30 10:30:19', 'yyyy-MM-DD HH:MM:SS')\n\n\n\n\nConverts \n2007-11-30 10:30:19\n in \nyyyy-MM-DD HH:MM:SS\n format to  milliseconds as \n1170131400019\n.\n\n\n\nEXAMPLE 3\n\n\ntime:timestampInMilliseconds('2007-11-30 10:30:19.000')\n\n\n\n\nConverts \n2007-11-30 10:30:19\n in \nyyyy-MM-DD HH:MM:ss.SSS\n format to  milliseconds as \n1196398819000\n.\n\n\n\nutcTimestamp \n(Function)\n\n\nFunction returns the system current time in UTC timezone with \nyyyy-MM-dd HH:mm:ss\n format.\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ntime:utcTimestamp()\n\n\n\n\nReturns the system current time in UTC timezone with \nyyyy-MM-dd HH:mm:ss\n format, and a sample output will be like \n2019-07-03 09:58:34\n.", 
            "title": "5.0.2"
        }, 
        {
            "location": "/api/5.0.2/#api-docs-v502", 
            "text": "Tested Siddhi Core version:  5.0.0  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v5.0.2"
        }, 
        {
            "location": "/api/5.0.2/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/5.0.2/#currentdate-function", 
            "text": "Function returns the system time in  yyyy-MM-dd  format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  time:currentDate()  Returns the current date in the  yyyy-MM-dd  format, such as  2019-06-21 .", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/5.0.2/#currenttime-function", 
            "text": "Function returns system time in the  HH:mm:ss  format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  time:currentTime()  Returns the current date in the  HH:mm:ss  format, such as  15:23:24 .", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/5.0.2/#currenttimestamp-function", 
            "text": "When no argument is provided, function returns the system current timestamp in  yyyy-MM-dd HH:mm:ss  format, and when a timezone is provided as an argument, it converts and return the current system time to the given timezone format.  Syntax  STRING  time:currentTimestamp( STRING  timezone)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timezone \n         The timezone to which the current time need to be converted. For example,  Asia/Kolkata ,  PST . Get the supported timezone IDs from  here \n         System timezone \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  time:currentTimestamp()  Returns current system time in  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 14:07:00 .  EXAMPLE 2  time:currentTimestamp('Asia/Kolkata')  Returns current system time converted to 'Asia/Kolkata' timezone  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 19:07:00 . Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)  EXAMPLE 3  time:currentTimestamp('CST')  Returns current system time converted to 'CST' timezone  yyyy-MM-dd HH:mm:ss  format, such as  2019-03-31 02:07:00 . Get the supported timezone IDs from [here](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.2/#date-function", 
            "text": "Extracts the date part of a date or date-time and return it in  yyyy-MM-dd  format.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  time:date('2014/11/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')  Extracts the date and returns  2014-11-11 .  EXAMPLE 2  time:date('2014-11-23 13:23:44.345')  Extracts the date and returns  2014-11-13 .  EXAMPLE 3  time:date('13:23:44', 'HH:mm:ss')  Extracts the date and returns  1970-01-01 .", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/5.0.2/#dateadd-function", 
            "text": "Adds the specified time interval to a date.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         No \n     \n     \n         expr \n         The amount by which the selected part of the date should be incremented. For example  2  , 5  , 10 , etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  time:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')  Adds five years to the given date value and returns  2019-11-11 13:23:44.657 .  EXAMPLE 2  time:dateAdd('2014-11-11 13:23:44.657', 5, 'YEAR')  Adds five years to the given date value and returns  2019-11-11 13:23:44.657  using the default date.format  yyyy-MM-dd HH:mm:ss.SSS .  EXAMPLE 3  time:dateAdd( 1415712224000L, 1, 'HOUR')  Adds one hour and  1415715824000  as a  string .", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/5.0.2/#datediff-function", 
            "text": "Returns difference between two dates in days.  Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         The value of the first date parameter. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         No \n     \n     \n         date.value2 \n         The value of the second date parameter. For example,  2014-11-11 13:23:44.657 ,  2014-11-11  ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         No \n     \n     \n         date.format1 \n         The format of the first date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         The format of the second date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         The first date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         The second date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  time:dateDiff('2014-11-11 13:23:44', 'yyyy-MM-dd HH:mm:ss', '2014-11-9 13:23:44', 'yyyy-MM-dd HH:mm:ss')  Returns the date difference between the two given dates as  2 .  EXAMPLE 2  time:dateDiff('2014-11-13 13:23:44', '2014-11-9 13:23:44')  Returns the date difference between the two given dates as  4 .  EXAMPLE 3  time:dateDiff(1415692424000L, 1412841224000L)  Returns the date difference between the two given dates as  33 .", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/5.0.2/#dateformat-function", 
            "text": "Formats the data in string or milliseconds format to the given date format.  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         No \n     \n     \n         date.target.format \n         The format of the date into which the date value needs to be converted. For example,  yyyy/MM/dd HH:mm:ss . \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         The format input date.value.For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  time:dateFormat('2014/11/11 13:23:44', 'mm:ss', 'yyyy/MM/dd HH:mm:ss')   Converts date based on the target date format  mm:ss  and returns  23:44 .  EXAMPLE 2  time:dateFormat('2014-11-11 13:23:44', 'HH:mm:ss')   Converts date based on the target date format  HH:mm:ss  and returns  13:23:44 .  EXAMPLE 3  time:dateFormat(1415692424000L, 'yyyy-MM-dd')   Converts date in millisecond based on the target date format  yyyy-MM-dd  and returns  2014-11-11 .", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/5.0.2/#datesub-function", 
            "text": "Subtracts the specified time interval from the given date.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         No \n     \n     \n         expr \n         The amount by which the selected part of the date should be decremented. For example  2  , 5  , 10 , etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  time:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR', 'yyyy-MM-dd HH:mm:ss.SSS')  Subtracts five years to the given date value and returns  2014-11-11 13:23:44.657 .  EXAMPLE 2  time:dateSub('2019-11-11 13:23:44.657', 5, 'YEAR')  Subtracts five years to the given date value and returns  2014-11-11 13:23:44.657  using the default date.format  yyyy-MM-dd HH:mm:ss.SSS .  EXAMPLE 3  time:dateSub( 1415715824000L, 1, 'HOUR')  Subtracts one hour and  1415712224000  as a  string .", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/5.0.2/#dayofweek-function", 
            "text": "Extracts the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  time:date('2014/12/11 13:23:44', 'yyyy/MM/dd HH:mm:ss')  Extracts the date and returns  Thursday .  EXAMPLE 2  time:date('2014-11-11 13:23:44.345')  Extracts the date and returns  Tuesday .", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/5.0.2/#extract-function", 
            "text": "Function extracts a date unit from the date.  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         This is the part of the date that needs to be modified. For example,  MINUTE ,  HOUR ,  MONTH ,  YEAR ,  QUARTER ,  WEEK ,  DAY ,  SECOND . \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         - \n         STRING \n         Yes \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy-MM-dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds. For example,  1415712224000L . \n         - \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  time:extract('YEAR', '2019/11/11 13:23:44.657', 'yyyy/MM/dd HH:mm:ss.SSS')  Extracts the year amount and returns  2019 .  EXAMPLE 2  time:extract('DAY', '2019-11-12 13:23:44.657')  Extracts the day amount and returns  12 .  EXAMPLE 3  time:extract(1394556804000L, 'HOUR')  Extracts the hour amount and returns  22 .", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/5.0.2/#timestampinmilliseconds-function", 
            "text": "Returns the system time or the given time in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example,  2014-11-11 13:23:44.657 ,  2014-11-11 ,  13:23:44.657 . \n         Current system time \n         STRING \n         Yes \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example,  yyyy/MM/dd HH:mm:ss.SSS . \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  time:timestampInMilliseconds()  Returns the system current time in milliseconds.  EXAMPLE 2  time:timestampInMilliseconds('2007-11-30 10:30:19', 'yyyy-MM-DD HH:MM:SS')  Converts  2007-11-30 10:30:19  in  yyyy-MM-DD HH:MM:SS  format to  milliseconds as  1170131400019 .  EXAMPLE 3  time:timestampInMilliseconds('2007-11-30 10:30:19.000')  Converts  2007-11-30 10:30:19  in  yyyy-MM-DD HH:MM:ss.SSS  format to  milliseconds as  1196398819000 .", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/5.0.2/#utctimestamp-function", 
            "text": "Function returns the system current time in UTC timezone with  yyyy-MM-dd HH:mm:ss  format.  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  time:utcTimestamp()  Returns the system current time in UTC timezone with  yyyy-MM-dd HH:mm:ss  format, and a sample output will be like  2019-07-03 09:58:34 .", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.1/", 
            "text": "API Docs - v5.0.1\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;\n\n\n\n\nThis query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in the 'HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;\n\n\n\n\nThis query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.\n\n\n\ncurrentTimestamp \n(Function)\n\n\nIf no argument is provided, this function will return the currentSystemTime and if the timezone is provided as an argument, it will convert the current systemtime to the given timezone and return. This function returns time in 'yyyy-MM-dd HH:mm:ss' format.\nTo check the available timezone ids, visit https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp(\nAsia/Kolkata\n) as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to Asia/Kolkata timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp(\nCST\n) as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to CST timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\ndate \n(Function)\n\n\nThis function returns the date part of a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;\n\n\n\n\n\nThis query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThis is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.\n\n\n\ndateDiff \n(Function)\n\n\n This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nThe date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nThe date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nThe format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nThe format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;\n\n\n\n\nThis query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nThe format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nThe format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;\n\n\n\n\nThis query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;\n\n\n\n\nThe Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\",\n\"WEEK\", \"DAY\", \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;\n\n\n\n\nThis query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;\n\n\n\n\nThe query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "5.0.1"
        }, 
        {
            "location": "/api/5.0.1/#api-docs-v501", 
            "text": "", 
            "title": "API Docs - v5.0.1"
        }, 
        {
            "location": "/api/5.0.1/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/5.0.1/#currentdate-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd' format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;  This query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/5.0.1/#currenttime-function", 
            "text": "This function returns system time in the 'HH:mm:ss' format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;  This query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/5.0.1/#currenttimestamp-function", 
            "text": "If no argument is provided, this function will return the currentSystemTime and if the timezone is provided as an argument, it will convert the current systemtime to the given timezone and return. This function returns time in 'yyyy-MM-dd HH:mm:ss' format. To check the available timezone ids, visit https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.  EXAMPLE 2  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp( Asia/Kolkata ) as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to Asia/Kolkata timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.  EXAMPLE 3  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp( CST ) as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to CST timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.1/#date-function", 
            "text": "This function returns the date part of a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;  This query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/5.0.1/#dateadd-function", 
            "text": "This function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         This is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         This is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;  This query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/5.0.1/#datediff-function", 
            "text": "This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         The date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         The date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         The format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         The format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;  This query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/5.0.1/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         The format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         The format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;  This query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/5.0.1/#datesub-function", 
            "text": "This function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         The amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         The part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;  This query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;  This query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/5.0.1/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;  The Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/5.0.1/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         The part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\", \"WEEK\", \"DAY\", \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;  This query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/5.0.1/#timestampinmilliseconds-function", 
            "text": "This function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;  The query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.  EXAMPLE 2  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;  The query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/5.0.1/#utctimestamp-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;  The query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.0/", 
            "text": "API Docs - v5.0.0\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;\n\n\n\n\nThis query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in the 'HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;\n\n\n\n\nThis query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.\n\n\n\ncurrentTimestamp \n(Function)\n\n\nIf no argument is provided, this function will return the currentSystemTime and if the timezone is provided as an argument, it will convert the current systemtime to the given timezone and return. This function returns time in 'yyyy-MM-dd HH:mm:ss' format.\nTo check the available timezone ids, visit https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp(\nAsia/Kolkata\n) as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to Asia/Kolkata timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp(\nCST\n) as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to CST timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\ndate \n(Function)\n\n\nThis function returns the date part of a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;\n\n\n\n\n\nThis query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThis is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.\n\n\n\ndateDiff \n(Function)\n\n\n This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nThe date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nThe date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nThe format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nThe format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;\n\n\n\n\nThis query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nThe format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nThe format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;\n\n\n\n\nThis query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;\n\n\n\n\nThe Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\",\n\"WEEK\", \"DAY\", \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;\n\n\n\n\nThis query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;\n\n\n\n\nThe query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "5.0.0"
        }, 
        {
            "location": "/api/5.0.0/#api-docs-v500", 
            "text": "", 
            "title": "API Docs - v5.0.0"
        }, 
        {
            "location": "/api/5.0.0/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/5.0.0/#currentdate-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd' format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;  This query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/5.0.0/#currenttime-function", 
            "text": "This function returns system time in the 'HH:mm:ss' format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;  This query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/5.0.0/#currenttimestamp-function", 
            "text": "If no argument is provided, this function will return the currentSystemTime and if the timezone is provided as an argument, it will convert the current systemtime to the given timezone and return. This function returns time in 'yyyy-MM-dd HH:mm:ss' format. To check the available timezone ids, visit https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.  EXAMPLE 2  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp( Asia/Kolkata ) as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to Asia/Kolkata timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.  EXAMPLE 3  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp( CST ) as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to CST timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.0/#date-function", 
            "text": "This function returns the date part of a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;  This query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/5.0.0/#dateadd-function", 
            "text": "This function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         This is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         This is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;  This query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/5.0.0/#datediff-function", 
            "text": "This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         The date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         The date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         The format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         The format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;  This query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/5.0.0/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         The format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         The format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;  This query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/5.0.0/#datesub-function", 
            "text": "This function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         The amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         The part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;  This query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;  This query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/5.0.0/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;  The Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/5.0.0/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         The part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\", \"WEEK\", \"DAY\", \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;  This query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/5.0.0/#timestampinmilliseconds-function", 
            "text": "This function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;  The query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.  EXAMPLE 2  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;  The query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/5.0.0/#utctimestamp-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;  The query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.1.1/", 
            "text": "API Docs - v4.1.1\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;\n\n\n\n\nThis query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in the 'HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;\n\n\n\n\nThis query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.\n\n\n\ncurrentTimestamp \n(Function)\n\n\nIf no argument is provided, this function will return the currentSystemTime and if the timezone is provided as an argument, it will convert the current systemtime to the given timezone and return. This function returns time in 'yyyy-MM-dd HH:mm:ss' format.\nTo check the available timezone ids, visit https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp(\nAsia/Kolkata\n) as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to Asia/Kolkata timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp(\nCST\n) as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to CST timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\ndate \n(Function)\n\n\nThis function returns the date part of a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;\n\n\n\n\n\nThis query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThis is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.\n\n\n\ndateDiff \n(Function)\n\n\n This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nThe date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nThe date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nThe format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nThe format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;\n\n\n\n\nThis query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nThe format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nThe format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;\n\n\n\n\nThis query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;\n\n\n\n\nThe Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\",\n\"WEEK\", \"DAY\", \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;\n\n\n\n\nThis query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;\n\n\n\n\nThe query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "4.1.1"
        }, 
        {
            "location": "/api/4.1.1/#api-docs-v411", 
            "text": "", 
            "title": "API Docs - v4.1.1"
        }, 
        {
            "location": "/api/4.1.1/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.1.1/#currentdate-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd' format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;  This query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.1.1/#currenttime-function", 
            "text": "This function returns system time in the 'HH:mm:ss' format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;  This query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.1.1/#currenttimestamp-function", 
            "text": "If no argument is provided, this function will return the currentSystemTime and if the timezone is provided as an argument, it will convert the current systemtime to the given timezone and return. This function returns time in 'yyyy-MM-dd HH:mm:ss' format. To check the available timezone ids, visit https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.  EXAMPLE 2  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp( Asia/Kolkata ) as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to Asia/Kolkata timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.  EXAMPLE 3  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp( CST ) as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system which is converted to CST timezone, in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.1.1/#date-function", 
            "text": "This function returns the date part of a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;  This query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.1.1/#dateadd-function", 
            "text": "This function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         This is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         This is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;  This query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.1.1/#datediff-function", 
            "text": "This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         The date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         The date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         The format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         The format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;  This query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.1.1/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         The format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         The format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;  This query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.1.1/#datesub-function", 
            "text": "This function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         The amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         The part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;  This query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;  This query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.1.1/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;  The Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.1.1/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         The part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\", \"WEEK\", \"DAY\", \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;  This query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.1.1/#timestampinmilliseconds-function", 
            "text": "This function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;  The query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.  EXAMPLE 2  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;  The query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.1.1/#utctimestamp-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;  The query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.1.0/", 
            "text": "API Docs - v4.1.0\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;\n\n\n\n\nThis query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in the 'HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;\n\n\n\n\nThis query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\ndate \n(Function)\n\n\nThis function returns the date part of a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;\n\n\n\n\n\nThis query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThis is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.\n\n\n\ndateDiff \n(Function)\n\n\n This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nThe date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nThe date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nThe format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nThe format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;\n\n\n\n\nThis query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nThe format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nThe format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;\n\n\n\n\nThis query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;\n\n\n\n\nThe Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\",\n\"WEEK\", \"DAY\", \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;\n\n\n\n\nThis query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;\n\n\n\n\nThe query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#api-docs-v410", 
            "text": "", 
            "title": "API Docs - v4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.1.0/#currentdate-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd' format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;  This query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.1.0/#currenttime-function", 
            "text": "This function returns system time in the 'HH:mm:ss' format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;  This query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.1.0/#currenttimestamp-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.1.0/#date-function", 
            "text": "This function returns the date part of a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;  This query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.1.0/#dateadd-function", 
            "text": "This function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         This is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         This is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;  This query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.1.0/#datediff-function", 
            "text": "This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         The date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         The date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         The format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         The format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;  This query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.1.0/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         The format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         The format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;  This query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.1.0/#datesub-function", 
            "text": "This function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         The amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         The part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;  This query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;  This query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.1.0/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;  The Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.1.0/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         The part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\", \"WEEK\", \"DAY\", \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;  This query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.1.0/#timestampinmilliseconds-function", 
            "text": "This function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;  The query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.  EXAMPLE 2  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;  The query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.1.0/#utctimestamp-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;  The query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.17/", 
            "text": "API Docs - v4.0.17\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;\n\n\n\n\nThis query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in the 'HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;\n\n\n\n\nThis query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;\n\n\n\n\nThis query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.\n\n\n\ndate \n(Function)\n\n\nThis function returns the date part of a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;\n\n\n\n\n\nThis query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThis is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThis is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.\n\n\n\ndateDiff \n(Function)\n\n\n This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nThe date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nThe date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nThe format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nThe format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;\n\n\n\n\nThis query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nThe format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nThe format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;\n\n\n\n\nThis query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nThe amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;\n\n\n\n\nThis query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;\n\n\n\n\nThis query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;\n\n\n\n\nThe Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nThe part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\",\n\"WEEK\", \"DAY\", \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \nThe date value in milliseconds from the epoch. For example, 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;\n\n\n\n\nThis query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nThe value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nThe date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;\n\n\n\n\nThe query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;\n\n\n\n\nThe query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "4.0.17"
        }, 
        {
            "location": "/api/4.0.17/#api-docs-v4017", 
            "text": "", 
            "title": "API Docs - v4.0.17"
        }, 
        {
            "location": "/api/4.0.17/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.17/#currentdate-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd' format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentDate() as currentTime \ninsert into OutputStream;  This query returns 'symbol' from the 'InputStream' and the current date and time, to the 'OutputStream'.It returns the current date in the 'yyyy-MM-dd' format.", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.17/#currenttime-function", 
            "text": "This function returns system time in the 'HH:mm:ss' format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTime() as currentTime\ninsert into OutputStream;  This query returns, the symbol from the 'InputStream' andthe current time of the system in 'HH:mm:ss' format as current time,to the 'OutputStream'.", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.17/#currenttimestamp-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into OutputStream;  This query returns, symbol from the 'InputStream' and the current time stamp of the system in 'yyyy-MM-dd HH:mm:ss' format as 'currentTimestamp', to the 'OutputStream'.", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.17/#date-function", 
            "text": "This function returns the date part of a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into OutputStream;  This query extracts the 'dateValue' in the 'dateFormat' format as the 'dateExtracted'. The query then returns the symbol and the 'dateExtracted' to the 'OutputStream'.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.17/#dateadd-function", 
            "text": "This function returns the specified time interval added to a date.If a parameter of 'STRING' type is passed as the first argument, the function accepts four parameters with the last parameter, i.e., 'dateFormat', as an optional one. If a parameter of 'LONG' type is passed as the first argument, the function accepts three parameters, i.e., 'timestampInMilliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date.For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         This is the amount by which the selected part of the date should be incremented.For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         This is the part of the date that needs to be modified.For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into OutputStream;  This query gets the date value from the 'InputStream, increments the 'YEAR' value of it by the 'expr' value given, formats the resultant value into the 'dateFormat' format given in the input stream and returns the formatted value to the 'OutputStream' as 'yearAdded', with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets the value of the 'timestampInMilliseconds' attribute from the input stream, adds the 'expr' number of hours to it and returns the  resultant value in milliseconds as 'hourAddedMills', into the 'OutputStream' with the symbol.", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.17/#datediff-function", 
            "text": "This function returns the time in days, between two dates. Two arguments of 'String' type are sent as the first two parameters. The function can accept four parameters,the last two parameters corresponding to the date formats being optional ones. The order of the parameters should be dateDiff(date.value1,date.value2,date.format1,date.format2). Instead, if two arguments of 'Long' type are sent as the first two parameters, the order of the parameters should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         The date value of the first parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         The date value of the second parameter. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\", \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         The format of the date provided for the first parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         The format of the date provided for the second parameter, i.e., yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom InputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into OutputStream;  This query returns the difference between 'timestampInMilliseconds1' and 'timestampInMilliseconds2' as the 'dateDifferenceInMilliseconds' and the difference between 'dataValue1' which is in the format, 'dateFormat1' and 'dataValue2' which is in the format, 'dateFormat2', as 'dateDifference'. This function then redirects the results to the 'OutputStream'.", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.17/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is of 'String' type, then the function accepts three parameters with the last parameter as an optional parameter.The order of the parameters should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Instead, if the first argument is of 'Long' type, then it accepts two parameters.In this case, the order of the parameter should be dateFormat(timestampInMilliseconds, dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         The format of the date into which the date value needs to be converted. For example, 'yyyy/MM/dd HH:mm:ss'. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         The format in which the data value is present in the input stream.For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom InputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into OutputStream;  This query formats the 'dateValue' in the 'InputStream' which is in the 'sourceFormat' to the 'targetFormat' as 'formattedData'. It also formats 'timestampInMilliseconds' which is in milliseconds to the 'targetFormat' as 'formattedUnixDate'. The function then returns the symbol 'formattedDate' and 'formattedUnixDate' to the 'OutputStream'.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.17/#datesub-function", 
            "text": "This function returns the date after subtracting a specified time interval from it. If a parameter of 'String' type is passed as the first argument, then the function accepts four parameters with the last parameter, i.e., 'date.format' as an optional one.If a parameter of 'Long' type is passed as the first argument, then the function accepts three parameters, i.e., 'timestamp.in.milliseconds', 'expr' and 'unit' in the given order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         The amount by which the selected part of the date should be incremented. For example, 2 ,5 ,10, etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         The part of the date that is required to be modified. For example, \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS' \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom InputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into OutputStream;  This query gets the date value from the input stream, decrements the 'YEAR'value of the 'dateValue' by the 'expr' value given, formats the resultant value into the 'dateFormat' format in the input stream and returns the formatted value to the 'OutputStream' as 'yearSubtracted' with the symbol.  EXAMPLE 2  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom InputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into OutputStream;  This query gets the value of the 'timestampInMilliseconds' from the input stream, subtracts the 'expr' number of hours from it and returns the  resultant value in milliseconds as 'hourSubtractedMills', to the 'OutputStream' with the symbol.", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.17/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, dateValue string,dateFormat string);\nfrom InputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into OutputStream;  The Query extracts the day on which the date given as 'dateValue' in the 'dateFormat' format falls. It returns the symbol and the extracted day as 'dayOfWeekExtracted', to the 'OutputStream'.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.17/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is of 'String' type then the function accepts three arguments with the last parameter, i.e., 'date.format' as an optional one. The order of the parameter is extract(unit,date.value,date.format). Instead, if the first argument passed is of 'Long' type, then the function accepts two parameters.In this case, the parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         The part of the date that needs to be manipulated. For example, \"MINUTE\", \"HOUR\", \"MONTH\", \"YEAR\", \"QUARTER\", \"WEEK\", \"DAY\", \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         The value of date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         The date value in milliseconds from the epoch. For example, 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom InputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into OutputStream;  This query extracts the year value from the 'dateValue' as 'YEAR'. The 'dateValue' is in the 'dateFormat' format. It also extracts the hours from 'timestampInMilliseconds' as 'HOUR'. The query then returns the symbols, 'YEAR' and 'HOUR' to the 'OutputStream'.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.17/#timestampinmilliseconds-function", 
            "text": "This function returns the system time or given time in milliseconds.If two parameters of 'String' type are sent as the first argument, the order of the parameters should be timestampInMilliseconds(date.value,date.format) with the last parameter, i.e., 'date.format', as the optional oneInstead, if no argument method is invoked, the system time is returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         The value of the date. For example, \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         The date format of the date value provided. For example, 'yyyy-MM-dd HH:mm:ss.SSS'. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into OutputStream;  The query converts 2007-11-30 10:30:19 which is in 'yyyy-MM-DD HH:MM:SS' format to  milliseconds as 'timestampInMilliseconds' and returns the symbol and 'timestampInMilliseconds' to the 'OutputStream'.  EXAMPLE 2  define stream InputStream (symbol string, price long, volume long);\nfrom InputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into OutputStream;  The query gets the system time in milliseconds as 'timestampInMilliseconds' and returns the symbol from the 'InputStream' and 'timestampInMilliseconds' to the 'OutputStream'.", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.17/#utctimestamp-function", 
            "text": "This function returns the system time in 'yyyy-MM-dd HH:mm:ss' format.  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream InputStream (symbol string, price long, volume long);from InputStream select symbol , time:utcTimestamp() as utcTimestamp insert into OutputStream;  The query returns the symbol in the 'InputStream', and the system time stamp in 'yyyy-MM-dd HH:mm:ss' format as 'utcTimestamp', to the 'OutputStream'.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.16/", 
            "text": "API Docs - v4.0.16\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#api-docs-v4016", 
            "text": "", 
            "title": "API Docs - v4.0.16"
        }, 
        {
            "location": "/api/4.0.16/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.16/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.16/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.16/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.16/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.16/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.16/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.16/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.16/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.16/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.16/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.16/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.16/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.15/", 
            "text": "API Docs - v4.0.15\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#api-docs-v4015", 
            "text": "", 
            "title": "API Docs - v4.0.15"
        }, 
        {
            "location": "/api/4.0.15/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.15/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.15/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.15/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.15/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.15/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.15/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.15/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.15/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.15/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.15/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.15/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.15/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.14/", 
            "text": "API Docs - v4.0.14\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#api-docs-v4014", 
            "text": "", 
            "title": "API Docs - v4.0.14"
        }, 
        {
            "location": "/api/4.0.14/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.14/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.14/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.14/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.14/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.14/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.14/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.14/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.14/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.14/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.14/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.14/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.14/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.13/", 
            "text": "API Docs - v4.0.13\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#api-docs-v4013", 
            "text": "", 
            "title": "API Docs - v4.0.13"
        }, 
        {
            "location": "/api/4.0.13/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.13/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.13/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.13/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.13/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.13/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.13/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.13/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.13/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.13/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.13/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.13/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.13/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.12/", 
            "text": "API Docs - v4.0.12\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#api-docs-v4012", 
            "text": "", 
            "title": "API Docs - v4.0.12"
        }, 
        {
            "location": "/api/4.0.12/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.12/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.12/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.12/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.12/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.12/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.12/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.12/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.12/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.12/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.12/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.12/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.12/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.11/", 
            "text": "API Docs - v4.0.11\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#api-docs-v4011", 
            "text": "", 
            "title": "API Docs - v4.0.11"
        }, 
        {
            "location": "/api/4.0.11/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.11/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.11/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.11/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.11/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.11/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.11/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.11/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.11/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.11/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.11/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.11/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.11/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.10/", 
            "text": "API Docs - v4.0.10\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#api-docs-v4010", 
            "text": "", 
            "title": "API Docs - v4.0.10"
        }, 
        {
            "location": "/api/4.0.10/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.10/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.10/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.10/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.10/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.10/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.10/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.10/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.10/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.10/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.10/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.10/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.10/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.9/", 
            "text": "API Docs - v4.0.9\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#api-docs-v409", 
            "text": "", 
            "title": "API Docs - v4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.9/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.9/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.9/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.9/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.9/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.9/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.9/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.9/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.9/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.9/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.9/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.9/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.8/", 
            "text": "API Docs - v4.0.8\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#api-docs-v408", 
            "text": "", 
            "title": "API Docs - v4.0.8"
        }, 
        {
            "location": "/api/4.0.8/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.8/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.8/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.8/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.8/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.8/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.8/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.8/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.8/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.8/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.8/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.8/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.8/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.7/", 
            "text": "API Docs - v4.0.7\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#api-docs-v407", 
            "text": "", 
            "title": "API Docs - v4.0.7"
        }, 
        {
            "location": "/api/4.0.7/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.7/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.7/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.7/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.7/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.7/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.7/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.7/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.7/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.7/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.7/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.7/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.7/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.6/", 
            "text": "API Docs - v4.0.6\n\n\nTime\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#api-docs-v406", 
            "text": "", 
            "title": "API Docs - v4.0.6"
        }, 
        {
            "location": "/api/4.0.6/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.6/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.6/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.6/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.6/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.6/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.6/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.6/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.6/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.6/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.6/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.6/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.6/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.5/", 
            "text": "API Docs - v4.0.5\n\n\nTime\n\n\ncurrentTime \n(Function)\n\n\nThis function returns system time in in HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTime()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream\n\n\n\ncurrentTimestamp \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd HH:mm:ss format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream\n\n\n\ndayOfWeek \n(Function)\n\n\nThis function returns the day on which a given date falls.\n\n\n\nSyntax\n\n\nSTRING\n time:dayOfWeek(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;\n\n\n\n\nThe Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.\n\n\n\ndateAdd \n(Function)\n\n\nThis function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateAdd(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol\n\n\n\ndateSub \n(Function)\n\n\nThis function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.\n\n\n\nSyntax\n\n\nSTRING\n time:dateSub(\nSTRING\n date.value, \nINT\n expr, \nSTRING\n unit, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nexpr\n\n        \nIn which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;\n\n\n\n\nThis query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;\n\n\n\n\nThis query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol\n\n\n\ncurrentDate \n(Function)\n\n\nThis function returns system time in yyyy-MM-dd format.\n\n\n\nSyntax\n\n\nSTRING\n time:currentDate()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;\n\n\n\n\nThis query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream\n\n\n\ndate \n(Function)\n\n\nThis function returns date part from a date or date/time expression.\n\n\n\nSyntax\n\n\nSTRING\n time:date(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;\n\n\n\n\n\nThis query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.\n\n\n\ndateDiff \n(Function)\n\n\n This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2). \n\n\n\nSyntax\n\n\nINT\n time:dateDiff(\nSTRING\n date.value1, \nSTRING\n date.value2, \nSTRING\n date.format1, \nSTRING\n date.format2, \nLONG\n timestamp.in.milliseconds1, \nLONG\n timestamp.in.milliseconds2)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value1\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value2\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format1\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format2\n\n        \nDate format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds1\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds2\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;\n\n\n\n\nThis query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value\n\n\n\ndateFormat \n(Function)\n\n\nThis function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).\n\n\n\nSyntax\n\n\nSTRING\n time:dateFormat(\nSTRING\n date.value, \nSTRING\n date.target.format, \nSTRING\n date.source.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.target.format\n\n        \nDate format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.source.format\n\n        \nDate format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS.\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;\n\n\n\n\nThis query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.\n\n\n\nextract \n(Function)\n\n\nThis function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).\n\n\n\nSyntax\n\n\nINT\n time:extract(\nSTRING\n unit, \nSTRING\n date.value, \nSTRING\n date.format, \nLONG\n timestamp.in.milliseconds)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nunit\n\n        \nWhich part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" ,\n\"WEEK\" , \"DAY\" , \"SECOND\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimestamp.in.milliseconds\n\n        \ndate value in milliseconds.(from the epoch) eg: 1415712224000L\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;\n\n\n\n\nThis query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.\n\n\n\ntimestampInMilliseconds \n(Function)\n\n\nThis function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n time:timestampInMilliseconds(\nSTRING\n date.value, \nSTRING\n date.format)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndate.value\n\n        \nvalue of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\".\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndate.format\n\n        \nDate format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS\n\n        \nyyyy-MM-dd HH:mm:ss.SSS\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nEXAMPLE 2\n\n\ndefine stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;\n\n\n\n\nThe query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream\n\n\n\nutcTimestamp \n(Function)\n\n\nThis function returns System time in yyyy-MM-dd HH:mm:ss format\n\n\n\nSyntax\n\n\nSTRING\n time:utcTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;\n\n\n\n\nThe query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "4.0.5"
        }, 
        {
            "location": "/api/4.0.5/#api-docs-v405", 
            "text": "", 
            "title": "API Docs - v4.0.5"
        }, 
        {
            "location": "/api/4.0.5/#time", 
            "text": "", 
            "title": "Time"
        }, 
        {
            "location": "/api/4.0.5/#currenttime-function", 
            "text": "This function returns system time in in HH:mm:ss format.  Syntax  STRING  time:currentTime()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTime() as currentTime\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time of the system in HH:mm:ss format as current time to the outputStream", 
            "title": "currentTime (Function)"
        }, 
        {
            "location": "/api/4.0.5/#currenttimestamp-function", 
            "text": "This function returns system time in yyyy-MM-dd HH:mm:ss format.  Syntax  STRING  time:currentTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentTimestamp() as currentTimestamp\ninsert into outputStream;  This query returns symbol from inputStream andcurrent time stamp of the system in yyyy-MM-dd HH:mm:ss format as currentTimestamp to the outputStream", 
            "title": "currentTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.5/#dayofweek-function", 
            "text": "This function returns the day on which a given date falls.  Syntax  STRING  time:dayOfWeek( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\nselect symbol,time:dayOfWeek(dateValue,dateFormat) as dayOfWeekExtracted\ninsert into outputStream;  The Query extract the day of the week from the date given as dateValue which isin the format 'dateFormat' and return symbol and extracted day as dayOfWeekExtractedto the outputStream.", 
            "title": "dayOfWeek (Function)"
        }, 
        {
            "location": "/api/4.0.5/#dateadd-function", 
            "text": "This function returns added specified time interval to a date.If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateAdd( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearAdded\ninsert into outputStream;  This query gets date value from the input stream, adds expr amount to the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearAdded with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateAdd(timestampInMilliseconds,expr,'HOUR') as hourAddedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, adds expr amount of hours to it and return  resultant value in milliseconds as hourAddedMills into the outputStream  with the symbol", 
            "title": "dateAdd (Function)"
        }, 
        {
            "location": "/api/4.0.5/#datesub-function", 
            "text": "This function returns subtracted specified time interval to a date. If a STRING parameter passed as the first argument then function accepts four parameters with last as optional which is the date.format. If a LONG parameter passed as the first argument, then function accepts three parameters which are timestamp.in.milliseconds,expr,unit in order.  Syntax  STRING  time:dateSub( STRING  date.value,  INT  expr,  STRING  unit,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         expr \n         In which amount, selected date format part should be incremented. eg: 2 ,5 ,10 etc. \n         \n         INT \n         No \n         No \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,expr int);\nfrom inputStream\n select symbol , time:dateAdd(dateValue,expr,'YEAR',dateFormat) as yearSubtracted\ninsert into outputStream;  This query gets date value from the input stream, subtract expr amount from the year value of the date value, format resultant value as date format given in the input stream and finally return the formatted value to the outputStream as yearSubtracted with the symbol  EXAMPLE 2  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long,expr int);\nfrom inputStream\n time:dateSub(timestampInMilliseconds,expr,'HOUR') as hourSubtractedMills\n insert into outputStream;  This query gets value of timestampInMilliseconds from the input stream, subtract expr amount of hours from it and return  resultant value in milliseconds as hourSubtractedMills into the outputStream  with the symbol", 
            "title": "dateSub (Function)"
        }, 
        {
            "location": "/api/4.0.5/#currentdate-function", 
            "text": "This function returns system time in yyyy-MM-dd format.  Syntax  STRING  time:currentDate()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream select symbol , time:currentDate() as currentTime \ninsert into outputStream;  This query returns symbol from inputStream andcurrent date of the system in yyyy-MM-dd format as current time to the outputStream", 
            "title": "currentDate (Function)"
        }, 
        {
            "location": "/api/4.0.5/#date-function", 
            "text": "This function returns date part from a date or date/time expression.  Syntax  STRING  time:date( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, dateValue string,dateFormat string);\nfrom inputStream\n select symbol,time:date(dateValue,dateFormat) as dateExtracted\n insert into outputStream;  This query extracts the date value from the dateValue which is in format'dateFormat' as the dateExtracted  and return symbol, and dateExtracted to the outputStream.", 
            "title": "date (Function)"
        }, 
        {
            "location": "/api/4.0.5/#datediff-function", 
            "text": "This function returns time(days) between two dates. If two STRING arguments are sent as first two parameters then function should accept four parameters with last two as optional parameters. Parameter order should be dateDiff(date.value1,date.value2,date.format1,date.format2). Else if two LONG arguments are sent as first two parameters then parameter order should be dateDiff(timestamp.in.milliseconds1,timestamp.in.milliseconds2).   Syntax  INT  time:dateDiff( STRING  date.value1,  STRING  date.value2,  STRING  date.format1,  STRING  date.format2,  LONG  timestamp.in.milliseconds1,  LONG  timestamp.in.milliseconds2)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value1 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value2 \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format1 \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         date.format2 \n         Date format of the provided date.value2. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds1 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n     \n     \n         timestamp.in.milliseconds2 \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue1 string,dateFormat1 string,dateValue2 string,dateFormat2 string,);\nfrom inputStream\n time:dateDiff(timestampInMilliseconds1,timestampInMilliseconds2)select symbol , time:dateDiff(dateValue1,dateValue2,dateFormat1,dateFormat2) as dateDifference,\n as dateDifferenceInMilliseconds insert into outputStream;  This query return difference between timestampInMilliseconds1 and timestampInMilliseconds2 as dateDifferenceInMilliseconds and difference between dataValue1 which is in the format 'dateFormat1' and dataValue2 which isin the format 'dateFormat2' as dateDifference and return to the outputStream with symbol value", 
            "title": "dateDiff (Function)"
        }, 
        {
            "location": "/api/4.0.5/#dateformat-function", 
            "text": "This function returns a formatted date string.If the first argument is a STRING then function accepts three parameters with last parameter as a optional parameter.Parameter order should be dateFormat(dateValue,dateTargetFormat,dateSourceFormat). Else if first argument is a LONG then function accepts two parameters.Parameter order should be dateFormat(timestampInMilliseconds,dateTargetFormat).  Syntax  STRING  time:dateFormat( STRING  date.value,  STRING  date.target.format,  STRING  date.source.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.target.format \n         Date format which need to be converted to. eg: yyyy/MM/dd HH:mm:ss. \n         \n         STRING \n         No \n         No \n     \n     \n         date.source.format \n         Date format of the provided date.value1. eg: yyyy-MM-dd HH:mm:ss.SSS. \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L. \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,sourceFormat string,timestampInMilliseconds long,targetFormat string);\nfrom inputStream\nselect symboltime:dateFormat(dateValue,targetFormat,sourceFormat) as formattedDate,time:dateFormat(timestampInMilliseconds,targetFormat) as formattedUnixDate\ninsert into outputStream;  This query formats the dateValue in the inputStream which is currently in sourceFormat to the targetFormat as formattedData and formats timestampInMilliseconds which is in millisecond to the targetFormat as formattedUnixDate then return symbol formattedDate and formattedUnixDate to the outputStream.", 
            "title": "dateFormat (Function)"
        }, 
        {
            "location": "/api/4.0.5/#extract-function", 
            "text": "This function returns date attributes from a date expression. If the first argument passed is a STRING then the function will accept three arguments with last parameter as optional which is date.format.Parameter order should be extract(unit,date.value,date.format). Else if the first argument passed is a LONG then function accepts two parameters.Parameter order is extract(timestamp.in.milliseconds,unit).  Syntax  INT  time:extract( STRING  unit,  STRING  date.value,  STRING  date.format,  LONG  timestamp.in.milliseconds)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         unit \n         Which part of the date format you want to manipulate. eg: \"MINUTE\" , \"HOUR\" , \"MONTH\" , \"YEAR\" , \"QUARTER\" , \"WEEK\" , \"DAY\" , \"SECOND\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n     \n     \n         timestamp.in.milliseconds \n         date value in milliseconds.(from the epoch) eg: 1415712224000L \n         \n         LONG \n         No \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string,dateValue string,dateFormat string,timestampInMilliseconds long);\nfrom inputStream \nselect symbol, time:extract('YEAR',dateValue,dateFormat) as YEAR,time:extract(timestampInMilliseconds,'HOUR') as HOUR\n insert into outputStream;  This query extracts the year value from the dateValue which is in format'dateFormat' as the YEAR, hours from timestampInMilliseconds as HOUR and return symbol, YEAR and HOUR to the outputStream.", 
            "title": "extract (Function)"
        }, 
        {
            "location": "/api/4.0.5/#timestampinmilliseconds-function", 
            "text": "This function returns system time or given time in milliseconds.If two STRING parameters are sent as the first argument, the parameter order should be timestampInMilliseconds(date.value,date.format) with last parameter as the optional parameter with is date.format.Else if no argument method invoked then system time will be returned in milliseconds.  Syntax  LONG  time:timestampInMilliseconds( STRING  date.value,  STRING  date.format)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         date.value \n         value of date. eg: \"2014-11-11 13:23:44.657\", \"2014-11-11\" , \"13:23:44.657\". \n         \n         STRING \n         No \n         No \n     \n     \n         date.format \n         Date format of the provided date value. eg: yyyy-MM-dd HH:mm:ss.SSS \n         yyyy-MM-dd HH:mm:ss.SSS \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds('2007-11-30 10:30:19','yyyy-MM-DD HH:MM:SS') as timestampInMilliseconds\ninsert into outputStream;  The query convert the 2007-11-30 10:30:19 which is in yyyy-MM-DD HH:MM:SS format to the milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream  EXAMPLE 2  define stream inputStream (symbol string, price long, volume long);\nfrom inputStream\nselect symbol , time:timestampInMilliseconds()as timestampInMilliseconds\ninsert into outputStream;  The query get the system time in milliseconds as timestampInMilliseconds and return symbol and timestampInMilliseconds to the output stream", 
            "title": "timestampInMilliseconds (Function)"
        }, 
        {
            "location": "/api/4.0.5/#utctimestamp-function", 
            "text": "This function returns System time in yyyy-MM-dd HH:mm:ss format  Syntax  STRING  time:utcTimestamp()  Examples  EXAMPLE 1  define stream inputStream (symbol string, price long, volume long);from inputStream select symbol , time:utcTimestamp() as utcTimestamp insert into outputStream;  The query return symbol from the inputStream and system time stamp in yyyy-MM-dd HH:mm:ss format as utcTimestamp to the outputStream.", 
            "title": "utcTimestamp (Function)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2019 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}